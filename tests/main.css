/*  This is the main scss file that will include all other files and generate css.  1. If You want your stylesheet to be name differently, rename this file. 2. If You feel that any section grew to long, move it into separate file, just the same as modules. 3. Please do not modify the order of sections, as this will result in unexpected output if in any output at all. 4. Use --style=compressed (or similar format) to get compressed output for production. 5. Visit http://sass-lang.co/documentation/file.SASS_REFERENCE.html#output_style1 for more information about compressing output. 6. Use --sourcemap=none (or similar format) to avoid generating map for production. */
/* Vendor styles ------------- If Your application uses any of vendor supplied styles, start building css with them, so they can be easily overwritten by custom styling. */
/* Theme settings  -------------- Import settings for the current theme - mainly colors, but anything specific to the style can go there. If You plan to build more themes, copy this file,  rename accordingly to the theme name and change this line. */
/* Base settings ------------- Setup Your helpers that will have defaults set from the theme settings. */
/* Reset ----- If you do not want to include normalize.css in your project, this is a custom reset file, where you can place your normalize/reset styles. */
html, body { margin: 0; padding: 0; }

img { border: 0; }

ul { margin: 0; padding: 0; list-style-type: none; }

* { outline: 0px solid transparent; }
*:focus { outline: 0px solid transparent; }

/* Breakpoints ----------- List of available breakpoints with mixins for using them. The three mixins have diffrent behaviour for undefined breakpoints. Feel free to choose one and modify the other mixin to behave the same way. */
/* min-width --------- forMinimum mixin only allows defined breakpoints. If passed argument doesn't match, warning is issued. */
/* max-width --------- forMaximum mixin allows defined breakpoints.  If passed argument doesn't match, it is used as the whole @media query. */
/* min and max width --------- forBetween does not check for undefined breakpoints. */
/* Fonts ----- List of fonts available in the application. Example of mixin for using fonts with fallback and default font. */
@font-face { font-family: "Open Sans Regular"; src: local("OpenSans-Regular"), local("OpenSans"), url("fonts/OpenSans-Regular.woff") format("woff"); font-weight: normal; font-style: normal; }
/* Vendor prefixes -------- Mixins for solving vendor prefixes issues and unsupported gradients in IE9. */
/* Colors ---------- Mixin for controling large amounts of colors, using maps.  To use it, include in your theme file map defining colors like in example below. Alternatively, pallet can contain groups like background, font, etc. */
/*

$colorPalettes: ( purple: ( base:   rgb(42,40,80), light:  rgb(51,46,140), dark:   rgb(40,38,65) ), grey: ( base:  #AAAAAA, light: lighten(#AAAAAA, 10%), dark: darken(#AAAAAA, 10%) )    
);



$colorPalettes: ( background: ( base:   #F5F5F5, light:  #FFFFFF, dark:   #F0F0F0 ), font: ( base:  #444444, active: #EE6C3E, error: #DD0000 )    
);



*/
/* Library ------- Mixins and placeholders for repeatable property sets. */
.tests { *zoom: 1; }
.tests:after { content: ""; display: table; clear: both; }

/* Z-index ------- This file provides a way to control zindexes without using any specific numebrs. List of zindex elements defines layers, that can be freely reordered, with new layers added without having to change anything else.  1. No need to set indexes over 9000. 2. Z-index offset controls the number from which we want to start indexing. 3. The actual zindex returned is doubled to allow js modifications. */
/* Animations ---------- This file contains mixins for defining keyframes and animation, as well as  basic keyframes. Any specific keyframes should be place in relevant module file. */
/* Defining keyframes ------------------ Use this mixin to define an animation. The animation itself does nothing. To use it, specify its name in mixin animation along with animation params. */
/* Defining animations ------------------- Any animation defined using keyframes can be used as a param */
/* List of keyframes ----------------- */
@-webkit-keyframes spin { 100% { transform: rotate(360deg); } }
@-moz-keyframes spin { 100% { transform: rotate(360deg); } }
@-ms-keyframes spin { 100% { transform: rotate(360deg); } }
@-o-keyframes spin { 100% { transform: rotate(360deg); } }
@keyframes spin { 100% { transform: rotate(360deg); } }
/* Common GUI styling ------------------- If you need to set some styling used across many places that doesn't fit any particular component, place it here. */
select { padding: 0.2em 0.5em; border-radius: 0.2em; border: solid 1px #777; }

textarea { padding: 0.2em 0.5em; border-radius: 0.2em; border: solid 1px #777; }

/* You may also want to style password, color, etc. */
input[type="text"] { padding: 0.2em 0.5em; border-radius: 0.2em; border: solid 1px #777; }

input[type="radio"] { padding: 0.2em 0.5em; border-radius: 0.2em; border: solid 1px #777; }

input[type="checkbox"] { padding: 0.2em 0.5em; border-radius: 0.2em; border: solid 1px #777; }

.is-hidden { display: none; }

/* Reusable components ------------------- Here should go css objects, that will be used repeatedly in many places. */
.test-button { padding: 0.2em 0.5em; border-radius: 0.3em; border: solid 1px; cursor: pointer; text-align: center; }

/* Basic application layout ------------------------ General structure for Your application does not change often. */
html { font-size: 14px; font-family: 'Open Sans', Helvetica, Verdana, Arial, sans-serif; color: #4E4E4E; background-color: #FCFCFC; }
@media (min-width: 1680px) { html { font-size: 16px; } }
@media (max-width: 767px) { html { font-size: 12px; } }

body { width: 80%; margin: 2em auto; }
@media (min-width: 1680px) { body { width: 70%; } }
@media (max-width: 767px) { body { width: 95%; } }

/* Modules  ------- Assuming Your application is split into modules, styles for each module have to be stored in separate files. Those files are listed in modules file,  since the list easily gets long and is subject to many changes. */
header { margin-bottom: 1em; font-size: 1.2em; }

.tests > div { float: left; width: 100%; margin-bottom: 2%; box-sizing: border-box; padding: 3em 2em; background-color: #DDEEFF; }
@media (min-width: 590px) and (max-width: 991px) { .tests > div { width: 49%; margin-left: 2%; }
  .tests > div:nth-child(2n + 1) { margin-left: 0; clear: both; } }
@media (min-width: 992px) and (max-width: 1679px) { .tests > div { width: 32%; margin-left: 2%; }
  .tests > div:nth-child(3n + 1) { margin-left: 0; clear: both; } }
@media (min-width: 1680px) { .tests > div { width: 23.5%; margin-left: 2%; }
  .tests > div:nth-child(4n + 1) { margin-left: 0; clear: both; } }

.test-user-select { -webkit-user-select: none; /* Chrome all / Safari all */ -moz-user-select: none; /* Firefox all */ -ms-user-select: none; /* IE 10+ */ user-select: none; }

.test-ellipsis > span { display: block; width: 3em; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
.test-ellipsis:hover > span { width: auto; white-space: normal; }

.test-gradient-horizontal { background-image: linear-gradient(to right, #ff3333, #ffff33 50%, #33ff33); /* IE 9 ---- 1. Supports only 2 colors in gradient. To get more, create multiple gradient elements. 2. Colors passed into filter must be in 6/8 digit format prepended with #. By default, in compressed output, SASS shortens colors. To avoid this issue, define colors as strings. 3. Another option is to use inspect function that will convert color to string.
*/ -ms-filter: "progid:DXImageTransform.Microsoft.gradient( GradientType=1, startColorstr=#ff3333, EndColorstr=#33ff33)"; }

.test-gradient-vertical { background-image: linear-gradient(to bottom, #ddeeff, #3366ff); /* IE 9 ---- 1. Supports only 2 colors in gradient. To get more, create multiple gradient elements. 2. Colors passed into filter must be in 6/8 digit format prepended with #. By default, in compressed output, SASS shortens colors. To avoid this issue, define colors as strings. 3. Another option is to use inspect function that will convert color to string.
*/ -ms-filter: "progid:DXImageTransform.Microsoft.gradient( GradientType=0, startColorstr=#ddeeff, EndColorstr=#3366ff)"; }

.test-transform { transition: transform 500ms; transform: rotate(10deg); }
.test-transform:hover { transform: none; }

.test-button { background-image: linear-gradient(to bottom, #FCFCFC, #F0F0F0); /* IE 9 ---- 1. Supports only 2 colors in gradient. To get more, create multiple gradient elements. 2. Colors passed into filter must be in 6/8 digit format prepended with #. By default, in compressed output, SASS shortens colors. To avoid this issue, define colors as strings. 3. Another option is to use inspect function that will convert color to string.
*/ -ms-filter: "progid:DXImageTransform.Microsoft.gradient( GradientType=0, startColorstr=#FCFCFC, EndColorstr=#F0F0F0)"; color: #555555; border-color: #999999; }

.test-animation { -webkit-animation: spin 2s linear infinite; -moz-animation: spin 2s linear infinite; -ms-animation: spin 2s linear infinite; -o-animation: spin 2s linear infinite; animation: spin 2s linear infinite; }

/* Shame ----- All the dirty, quick fixes go there. During development this file should be empty and only filled when time is short. The only valid place for !important.*/
/* Debugging --------- All the styles for debugging during development go there. When you need to  check any property, uncomment this line. */
